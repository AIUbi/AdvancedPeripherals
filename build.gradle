import java.text.SimpleDateFormat
import com.modrinth.minotaur.TaskModrinthUpload

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'com.android.tools.build:gradle:2.3.0'
    }
}


plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.jetbrains.changelog' version '1.2.1'
    id "com.modrinth.minotaur" version "1.2.1"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java-library'

wrapper {
    gradleVersion = '7.1'
    distributionType = Wrapper.DistributionType.ALL
}

def isSnapshotVersion = Boolean.valueOf(System.getProperty("snapshot"))

version = "${mod_version}" + (isSnapshotVersion ? "-SNAPSHOT" : "")
group = 'de.srendi.advancedperipherals'
archivesBaseName = "advancedperipherals-${minecraft_version}"

def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            def (name, value) = line.tokenize("=")
            if (value != null) {
                env[name.trim()] = value.trim()
            }
        }
    }

    return env
}

def secretEnv = getenv()
def curseforgeKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY") ?: ''
def modrinthKey = secretEnv["MODRINTH_KEY"] ?: System.getenv("MODRINTH_KEY")

minecraft {

    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            properties 'forge.logging.console.level': 'debug'

            mods {
                advancedperipherals {
                    source sourceSets.main
                }
            }
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'mixin.env.disableRefMap': 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            mods {
                advancedperipherals {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'advancedperipherals', '--all',
                    '--existing', file('src/main/resources').toString(),
                    '--existing', file('src/generated/resources').toString(),
                    '--output', file('src/generated/resources/')

            mods {
                advancedperipherals {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url 'https://squiddev.cc/maven/' }
    maven { url 'https://modmaven.dev/' }
    maven { url 'https://dvs1.progwml6.com/files/maven/' }
    maven { url 'https://repo.refinedmods.com/' }
    maven { url 'https://maven.theillusivec4.top/' }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://www.cursemaven.com' }
    maven {
        url 'https://ldtteam.jfrog.io/ldtteam/modding'
    }
}

dependencies {
    // Minimal requirements
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("org.squiddev:cc-tweaked-${cc_version}")
    // Compile-time API required
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    // Minimal requirements end

    // Extended requirements
    // Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    // Patchouli
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Refined Storage
    implementation fg.deobf("com.refinedmods:refinedstorage:${rs_version}")
    // AE2
    implementation fg.deobf("appeng:appliedenergistics2:${ae_version}");

    // Minecolonies
    implementation fg.deobf("com.minecolonies:minecolonies:${minecolonies_version}:universal")
    implementation fg.deobf("com.ldtteam:structurize:${structurize_version}:universal")
    // Botania with deps
    implementation fg.deobf("vazkii.botania:Botania:${botania_version}")

    // Integrated dynamics
    implementation fg.deobf("curse.maven:integrateddynamics-${integrated_dynamics_version}")
    implementation fg.deobf("curse.maven:CommonCapabilites-${common_capabilities_version}")
    implementation fg.deobf("curse.maven:CyclopsCore-${cyclops_core_version}")
    
    // Mekanism with addons
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")

    // Immersive Engineering
    implementation fg.deobf("curse.maven:immersiveengineering-${immersive_engineering_version}")

    // Storage Drawers
    implementation fg.deobf("curse.maven:storagedrawers-${storagedrawers_version}")

    // Testing stuff
//    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    runtimeOnly fg.deobf("curse.maven:crashutilites-${cu_version}")

}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    headerParserRegex = ~/\d+\.\d+\.\d+\w/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = []
}

jar {
    manifest({
        attributes([
                "Specification-Title"     : "advancedperipherals",
                "Specification-Vendor"    : "Srendi",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : "advancedperipherals",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Srendi",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    })
}

jar.finalizedBy('reobfJar')

curseforge {
    apiKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY") ?: "DUMMY_KEY"

    project {
        id = "431725"
        releaseType = "${release_type}"
        mainArtifact(jar) {
            displayName = "Advanced Peripherals ${minecraft_version} ${version}"
            relations {
                requiredDependency 'cc-tweaked'
                optionalDependency 'patchouli'
            }
        }
        try {
            changelog = "${project.changelog.get(project.version).withHeader(false).toText()}"
            changelogType = "markdown"
        } catch (err) {
            System.out.println(err)
            changelog = ""
        }
    }
}


task publishModrinth (type: TaskModrinthUpload) {
    dependsOn('assemble', 'reobfJar')
    onlyIf {
        modrinthKey
    }

    token = modrinthKey
    projectId = 'SOw6jD6x'
    uploadFile = jar

    versionNumber = project.version
    versionName = "Advanced Peripherals ${minecraft_version} ${version}"
    versionType = release_type

    addGameVersion(minecraft_version)
    addLoader('forge')

    try {
        changelog = "${project.changelog.get(project.version).withHeader(false).toText()}"
        changelogType = "markdown"
    } catch (err) {
        System.out.println(err)
        changelog = ""
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            artifact jar
        }
    }
    repositories {
        maven {
            url "https://maven.pkg.github.com/Seniorendi/AdvancedPeripherals"
            credentials {
                username = secretEnv["USERNAME"] ?: System.getenv("USERNAME")
                password = secretEnv["TOKEN"] ?: System.getenv("TOKEN")
            }
        }
    }
}